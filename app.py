# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V0dgQVpZs4wmt3e9TB4wzl2V1wHXxgKs
"""

!pip install openai
import streamlit as st
import openai
from io import StringIO
import random
from PyPDF2 import PdfReader
import docx

# OpenAI API Key (replace with your own)
openai.api_key = 'OPENAI_API_KEY'

# Function to extract text from PDF
def extract_text_from_pdf(pdf_file):
    reader = PdfReader(pdf_file)
    text = ''
    for page in reader.pages:
        text += page.extract_text()
    return text

# Function to extract text from DOC/DOCX
def extract_text_from_docx(doc_file):
    doc = docx.Document(doc_file)
    text = ''
    for para in doc.paragraphs:
        text += para.text + '\n'
    return text

# Function to call OpenAI API for question generation
def generate_ai_questions(skills):
    questions = []
    for skill in skills:
        # Construct the prompt to generate questions for the skill
        prompt = f"Generate interview questions for the skill: {skill}. Include theory, coding, and behavioral questions."

        response = openai.Completion.create(
            model="text-davinci-003",  # You can use GPT-3 or other versions like GPT-4
            prompt=prompt,
            max_tokens=150,  # You can adjust token count based on your requirement
            n=1,
            stop=None,
            temperature=0.7  # Controls the creativity of the model
        )

        # Extracting the generated questions
        questions.append(response.choices[0].text.strip())

    return questions

# Dummy function for extracting skills
def extract_skills(text):
    return ["Python", "SQL", "Machine Learning", "Data Structures"]

# Streamlit App
st.set_page_config(page_title="AI Interview Preparation System", layout="wide")
st.title("AI-Based Interview Preparation System")

st.sidebar.title("Navigation")
option = st.sidebar.radio("Go to", ["Upload Resume & JD", "Generate Questions", "Coding Playground", "MCQ Quiz"])

if option == "Upload Resume & JD":
    st.header("Upload Resume and Job Description")

    # Resume file upload (PDF and DOC/DOCX)
    resume_file = st.file_uploader("Upload Resume (PDF or DOC/DOCX)", type=["pdf", "doc", "docx"])
    jd_text = st.text_area("Enter Job Description (JD)")

    if resume_file:
        file_extension = resume_file.name.split('.')[-1]
        if file_extension == 'pdf':
            resume_text = extract_text_from_pdf(resume_file)
        elif file_extension in ['doc', 'docx']:
            resume_text = extract_text_from_docx(resume_file)

        st.write("Extracted Text from Resume:")
        st.write(resume_text)

        if jd_text:
            st.write("Job Description Provided:")
            st.write(jd_text)

            # Extract skills from resume and JD
            skills = extract_skills(resume_text + jd_text)
            st.session_state.skills = skills
            st.success(f"Skills Extracted: {', '.join(skills)}")

if option == "Generate Questions":
    st.header("Generate Interview Questions")
    if 'skills' in st.session_state:
        # Generate AI-based questions using OpenAI
        ai_questions = generate_ai_questions(st.session_state.skills)

        st.subheader("Generated AI Interview Questions")
        for idx, questions in enumerate(ai_questions):
            st.write(f"**For {st.session_state.skills[idx]}**:")
            st.write(questions)
    else:
        st.warning("Please upload resume and JD first!")

if option == "Coding Playground":
    st.header("Coding Playground")
    question = "Write a Python program to reverse the string 'hello'. Save the result in variable `output`."
    st.subheader("Coding Question:")
    st.write(question)

    user_code = st.text_area("Write your Python code here:", height=300)

    if st.button("Submit Code"):
        if check_code_accuracy(user_code):
            st.success("Correct Output! Good job!")
        else:
            st.error("Incorrect Output. Try again!")

if option == "MCQ Quiz":
    st.header("MCQ Quiz")
    if 'skills' in st.session_state:
        mcqs = generate_mcqs(st.session_state.skills)
        score = 0
        for idx, mcq in enumerate(mcqs):
            st.subheader(f"Q{idx+1}: {mcq['question']}")
            user_answer = st.radio("Choose your answer:", mcq['options'], key=idx)
            if user_answer == mcq['answer']:
                score += 1

        if st.button("Submit Quiz"):
            st.success(f"Your Score: {score}/{len(mcqs)}")
    else:
        st.warning("Please upload resume and JD first!")